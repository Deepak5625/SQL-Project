-- Task 1: Employee Data Analysis
use modelcarsdb ;

-- 1. Find the total number of employees.
select count(*) AS total_employees from employees;

-- 2. List all employees with their basic information.
select * from  employees;

-- 3. Count the number of employees holding each job title.
select jobTitle, count(*) as employee_count from employees
group by jobTitle;

-- 4. Find the employees who don't have a manager (reports To is NULL).
select employeeNumber, lastName, firstName from employees
where reportsto is null;

-- 5. Calculate total sales generated by each sales representative
select employeenumber, firstname, lastname, sum(quantityordered*priceeach) as totalsales from employees e
join customers c on e.employeenumber=c.salesRepEmployeeNumber
join orders using (customernumber) 
join orderdetails using (ordernumber)
group by employeenumber
order by totalsales; 

-- 6. Find the most profitable sales representative based on total sales.
select employeenumber, firstname, lastname, sum(quantityordered*priceeach) as totalsales from employees 
join customers on employees.employeenumber=customers.salesRepEmployeeNumber
join orders using (customernumber) 
join orderdetails using (ordernumber)
group by employeenumber
order by totalsales desc
limit 1;


-- Task 2: Order Analysis
-- 1. Find the average order amount for each customer.
select customerNumber,customerName,avg(quantityOrdered * priceEach) as Avg_order_amount from customers 
join orders using (customerNumber)
join orderdetails using (orderNumber)
group by customerNumber
order by customerNumber;

-- 2. Find the number of orders placed in each month.
select month(orderDate) AS month_number, count(*) as order_count from orders
group by month(orderDate);

-- 3. Identify orders that are still pending shipment (status = 'Pending').
select *from orders
where status = 'Pending';

-- 4. List orders along with customer details
select customers.*,orders.* from customers 
join orders using (customernumber); 

-- 5. Retrieve the most recent orders (based on order date).
select orderNumber,max(orderDate) from orders
group by orderNumber
order by orderdate desc;


-- 6. Calculate total sales for each order
select ordernumber, sum(quantityordered*priceeach) as totalsales from orderdetails
group by ordernumber;

-- 7. Find the highest-value order based on total sales.
select ordernumber, sum(quantityordered*priceeach) as totalsales from orderdetails
group by ordernumber
order by totalsales desc
limit 1;

-- 8. List all orders with their corresponding order details
select
    o.orderNumber,
    o.orderDate,
    o.requiredDate,
    o.shippedDate,
    o.status,
    o.comments,
    od.productCode,
    od.quantityOrdered,
    od.priceEach,
    od.orderLineNumber
from Orders o
join OrderDetails od on o.orderNumber = od.orderNumber
order by o.orderNumber, od.orderLineNumber;

-- 9. List the most frequently ordered products.
select p.productcode,p.productname,count(od.ordernumber) as numberoforders from orderdetails od
join products p on od.productcode = p.productcode
group by p.productcode, p.productname
order by numberoforders desc;

-- 10. Calculate total revenue for each order.
select o.ordernumber,sum(od.quantityordered * od.priceeach) as totalrevenue from orderdetails od
join orders o on od.ordernumber = o.ordernumber
group by o.ordernumber;

-- 11. Identify the most profitable orders based on total revenue.
SELECT od.orderNumber,SUM(od.quantityOrdered * od.priceEach) AS totalRevenue,SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS totalProfit
FROM orderdetails od
JOIN products p ON od.productCode = p.productCode
GROUP BY od.orderNumber
ORDER BY totalProfit DESC,totalRevenue DESC;

-- 12. List all orders with detailed product information.
select orders.*,products.* from orders 
join orderdetails using (ordernumber) 
join products using (productcode);


-- 13.Identify orders with delayed shipping (shippedDate > requiredDate).
select * from orders
where shippeddate>requireddate;

-- 14. Find the most popular product combinations within orders.
select concat(od1.productcode, '-', od2.productcode) as productcombination,count(*) as combinationcount
from  orderdetails od1
join orderdetails od2 on od1.ordernumber = od2.ordernumber
where od1.productcode < od2.productcode
group by productcombination
order by combinationcount desc;

-- 15. Calculate revenue for each order and identify the top 10 most profitable.
SELECT od.orderNumber,SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS totalProfit
FROM orderdetails od
JOIN products p ON od.productCode = p.productCode
GROUP BY od.orderNumber
ORDER BY totalProfit DESC
LIMIT 10;

